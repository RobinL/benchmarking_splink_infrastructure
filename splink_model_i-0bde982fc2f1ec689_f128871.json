{
    "link_type": "dedupe_only",
    "blocking_rules_to_generate_predictions": [
        {
            "blocking_rule": "(l.\"last_name\" = r.\"last_name\") AND (l.\"occupation\" = r.\"occupation\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"first_name\" = r.\"first_name\") AND (l.\"last_name\" = r.\"last_name\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"first_name\" = r.\"first_name\") AND (l.\"middle_name\" = r.\"middle_name\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"middle_name\" = r.\"middle_name\") AND (l.\"last_name\" = r.\"last_name\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"first_name\" = r.\"first_name\") AND (l.\"dob\" = r.\"dob\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"first_name\" = r.\"first_name\") AND (l.\"middle_name\" = r.\"middle_name\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"last_name\" = r.\"last_name\") AND (l.\"birth_lat\" = r.\"birth_lat\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"first_name\" = r.\"first_name\") AND (l.\"birth_lng\" = r.\"birth_lng\")",
            "sql_dialect": "duckdb"
        },
        {
            "blocking_rule": "(l.\"middle_name\" = r.\"middle_name\") AND (l.\"occupation\" = r.\"occupation\")",
            "sql_dialect": "duckdb"
        }
    ],
    "comparisons": [
        {
            "output_column_name": "first_name",
            "comparison_levels": [
                {
                    "sql_condition": "\"first_name_l\" IS NULL OR \"first_name_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"first_name_l\" = \"first_name_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.7843423469724481,
                    "u_probability": 0.0023234883506451057,
                    "tf_adjustment_column": "first_name",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"first_name_l\", \"first_name_r\") >= 0.9",
                    "label_for_charts": "Jaro_winkler_similarity >= 0.9",
                    "m_probability": 0.10956439239573865,
                    "u_probability": 0.002024638645500055
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"first_name_l\", \"first_name_r\") >= 0.7",
                    "label_for_charts": "Jaro_winkler_similarity >= 0.7",
                    "m_probability": 0.07732705646301999,
                    "u_probability": 0.01908787884898849
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.02876620416879323,
                    "u_probability": 0.9765639941548664
                }
            ],
            "comparison_description": "Exact match vs. First_Name within jaro_winkler_similarity thresholds 0.9, 0.7 vs. anything else"
        },
        {
            "output_column_name": "middle_name",
            "comparison_levels": [
                {
                    "sql_condition": "\"middle_name_l\" IS NULL OR \"middle_name_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"middle_name_l\" = \"middle_name_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.7900306666992049,
                    "u_probability": 0.004548104447299969
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"middle_name_l\", \"middle_name_r\") >= 0.9",
                    "label_for_charts": "Jaro_winkler_similarity >= 0.9",
                    "m_probability": 0.09987749970709035,
                    "u_probability": 0.0014789241667826098
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.1100918335937048,
                    "u_probability": 0.9939729713859174
                }
            ],
            "comparison_description": "Exact match vs. Middle_Name within jaro_winkler_similarity threshold 0.9 vs. anything else"
        },
        {
            "output_column_name": "last_name",
            "comparison_levels": [
                {
                    "sql_condition": "\"last_name_l\" IS NULL OR \"last_name_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"last_name_l\" = \"last_name_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.7882860800813101,
                    "u_probability": 0.00013327012429091478,
                    "tf_adjustment_column": "last_name",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"last_name_l\", \"last_name_r\") >= 0.9",
                    "label_for_charts": "Jaro_winkler_similarity >= 0.9",
                    "m_probability": 0.12688247788452542,
                    "u_probability": 0.0002494155088598121
                },
                {
                    "sql_condition": "jaro_winkler_similarity(\"last_name_l\", \"last_name_r\") >= 0.7",
                    "label_for_charts": "Jaro_winkler_similarity >= 0.7",
                    "m_probability": 0.04902533435462857,
                    "u_probability": 0.01163791604266527
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.035806107679535924,
                    "u_probability": 0.987979398324184
                }
            ],
            "comparison_description": "Exact match vs. Last_Name within jaro_winkler_similarity thresholds 0.9, 0.7 vs. anything else"
        },
        {
            "output_column_name": "dob",
            "comparison_levels": [
                {
                    "sql_condition": "\"dob_l\" IS NULL OR \"dob_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"dob_l\" = \"dob_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.6143187779319277,
                    "u_probability": 0.000731695951963641,
                    "tf_adjustment_column": "dob",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "levenshtein(\"dob_l\", \"dob_r\") <= 1",
                    "label_for_charts": "Levenshtein <= 1",
                    "m_probability": 0.03216890188228329,
                    "u_probability": 0.012802332529383243
                },
                {
                    "sql_condition": "levenshtein(\"dob_l\", \"dob_r\") <= 2",
                    "label_for_charts": "Levenshtein <= 2",
                    "m_probability": 0.11494178230569588,
                    "u_probability": 0.07028478524846433
                },
                {
                    "sql_condition": "levenshtein(\"dob_l\", \"dob_r\") <= 4",
                    "label_for_charts": "Levenshtein <= 4",
                    "m_probability": 0.20742178918785178,
                    "u_probability": 0.28468876238408536
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.03114874869224147,
                    "u_probability": 0.6314924238861034
                }
            ],
            "comparison_description": "Exact match vs. Dob within levenshtein thresholds 1, 2, 4 vs. anything else"
        },
        {
            "output_column_name": "custom_birth_lng_birth_lat",
            "comparison_levels": [
                {
                    "sql_condition": "(birth_lat_l IS NULL OR birth_lat_r IS NULL) \nOR (birth_lng_l IS NULL OR birth_lng_r IS NULL)",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n        \n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"birth_lat_l\") ) * sin( radians(\"birth_lat_r\") ) +\n        cos( radians(\"birth_lat_l\") ) * cos( radians(\"birth_lat_r\") )\n            * cos( radians(\"birth_lng_r\" - \"birth_lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"birth_lat_l\") ) * sin( radians(\"birth_lat_r\") ) +\n        cos( radians(\"birth_lat_l\") ) * cos( radians(\"birth_lat_r\") )\n            * cos( radians(\"birth_lng_r\" - \"birth_lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"birth_lat_l\") ) * sin( radians(\"birth_lat_r\") ) +\n        cos( radians(\"birth_lat_l\") ) * cos( radians(\"birth_lat_r\") )\n            * cos( radians(\"birth_lng_r\" - \"birth_lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 10\n        ",
                    "label_for_charts": "Distance less than 10km",
                    "m_probability": 0.8326371080810965,
                    "u_probability": 0.0017962831123808569
                },
                {
                    "sql_condition": "\n        \n        cast(\n            acos(\n                \n        case\n            when (\n        sin( radians(\"birth_lat_l\") ) * sin( radians(\"birth_lat_r\") ) +\n        cos( radians(\"birth_lat_l\") ) * cos( radians(\"birth_lat_r\") )\n            * cos( radians(\"birth_lng_r\" - \"birth_lng_l\") )\n    ) > 1 then 1\n            when (\n        sin( radians(\"birth_lat_l\") ) * sin( radians(\"birth_lat_r\") ) +\n        cos( radians(\"birth_lat_l\") ) * cos( radians(\"birth_lat_r\") )\n            * cos( radians(\"birth_lng_r\" - \"birth_lng_l\") )\n    ) < -1 then -1\n            else (\n        sin( radians(\"birth_lat_l\") ) * sin( radians(\"birth_lat_r\") ) +\n        cos( radians(\"birth_lat_l\") ) * cos( radians(\"birth_lat_r\") )\n            * cos( radians(\"birth_lng_r\" - \"birth_lng_l\") )\n    )\n        end\n    \n            ) * 6371\n            as float\n        )\n     <= 100\n        ",
                    "label_for_charts": "Distance less than 100km",
                    "m_probability": 0.16710910769794662,
                    "u_probability": 0.0066142330182193
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.00025378422095691884,
                    "u_probability": 0.9915894838693998
                }
            ],
            "comparison_description": "Km distance within the following thresholds Km threshold(s): 10, Km threshold(s): 100 vs. anything else"
        },
        {
            "output_column_name": "occupation",
            "comparison_levels": [
                {
                    "sql_condition": "\"occupation_l\" IS NULL OR \"occupation_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"occupation_l\" = \"occupation_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.8714741573930815,
                    "u_probability": 0.0269472965379799,
                    "tf_adjustment_column": "occupation",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.12852584260691835,
                    "u_probability": 0.9730527034620201
                }
            ],
            "comparison_description": "Exact match vs. anything else"
        }
    ],
    "retain_intermediate_calculation_columns": false,
    "retain_matching_columns": false,
    "max_iterations": 20,
    "em_convergence": 0.001,
    "sql_dialect": "duckdb",
    "linker_uid": "gu5vnjib",
    "probability_two_random_records_match": 4.372573073632888e-07
}